[tool:pytest]
# Pytest configuration file

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 6.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    security: Security tests
    slow: Slow running tests (> 5 seconds)
    external: Tests that require external services
    database: Tests that require database
    redis: Tests that require Redis
    webhook: Webhook related tests
    auth: Authentication/authorization tests
    analytics: Analytics related tests
    billing: Billing related tests
    orchestrator: Orchestrator related tests
    agents: Agent related tests
    fallback: Fallback system tests

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:asyncio
    ignore::RuntimeWarning:asyncio

# Environment variables for testing
env =
    TESTING = true
    DATABASE_URL = sqlite:///test.db
    REDIS_URL = redis://localhost:6379/1
    DEBUG = false
    LOG_LEVEL = WARNING

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */scripts/*
    app/main.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml