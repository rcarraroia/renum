#!/usr/bin/env python3
"""
Script para testar e diagnosticar a conex√£o com Supabase.
"""

import os
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def test_supabase_connection():
    """Testa a conex√£o com Supabase."""
    print("üîç Testando conex√£o com Supabase...")
    print("=" * 50)
    
    # Verifica vari√°veis de ambiente
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
    
    print(f"SUPABASE_URL: {supabase_url}")
    print(f"SUPABASE_ANON_KEY: {'*' * 20 if supabase_anon_key else 'NOT SET'}")
    
    if not supabase_url or not supabase_anon_key:
        print("‚ùå Vari√°veis de ambiente n√£o configuradas!")
        return False
    
    try:
        from supabase import create_client, Client
        
        # Cria cliente
        supabase: Client = create_client(supabase_url, supabase_anon_key)
        print("‚úÖ Cliente Supabase criado com sucesso")
        
        # Testa autentica√ß√£o b√°sica
        print("\nüîê Testando funcionalidades de autentica√ß√£o...")
        
        # Tenta fazer signup de teste
        test_email = "testuser123@gmail.com"  # Email mais realista
        test_password = "TestPassword123!"
        
        try:
            # Primeiro, tenta fazer login para ver se o usu√°rio j√° existe
            login_response = supabase.auth.sign_in_with_password({
                "email": test_email,
                "password": test_password
            })
            
            if login_response.user:
                print(f"‚úÖ Login funcionando - Usu√°rio existe: {login_response.user.email}")
                return True
                
        except Exception as login_error:
            print(f"‚ÑπÔ∏è  Login falhou (esperado se usu√°rio n√£o existe): {login_error}")
            
            # Tenta fazer signup
            try:
                signup_response = supabase.auth.sign_up({
                    "email": test_email,
                    "password": test_password,
                    "options": {
                        "data": {"name": "Test User"}
                    }
                })
                
                if signup_response.user:
                    print(f"‚úÖ Signup funcionando - Usu√°rio criado: {signup_response.user.email}")
                    print(f"   ID: {signup_response.user.id}")
                    print(f"   Confirmado: {signup_response.user.email_confirmed_at is not None}")
                    return True
                else:
                    print("‚ùå Signup falhou - Nenhum usu√°rio retornado")
                    return False
                    
            except Exception as signup_error:
                print(f"‚ùå Signup falhou: {signup_error}")
                return False
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Supabase: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_database_access():
    """Testa acesso ao banco de dados."""
    print("\nüìä Testando acesso ao banco de dados...")
    
    try:
        from supabase import create_client
        
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        
        supabase = create_client(supabase_url, supabase_anon_key)
        
        # Tenta listar tabelas (pode falhar por permiss√µes)
        try:
            # Tenta acessar uma tabela comum do Supabase
            response = supabase.table('auth.users').select('*').limit(1).execute()
            print("‚úÖ Acesso ao banco funcionando")
            return True
        except Exception as e:
            if "permission denied" in str(e).lower():
                print("‚ÑπÔ∏è  Sem permiss√£o para acessar auth.users (normal)")
                
                # Tenta criar uma tabela de teste
                try:
                    # Verifica se consegue executar uma query b√°sica
                    response = supabase.rpc('version').execute()
                    print("‚úÖ Conex√£o com banco estabelecida")
                    return True
                except Exception as rpc_error:
                    print(f"‚ö†Ô∏è  RPC falhou: {rpc_error}")
                    return False
            else:
                print(f"‚ùå Erro de acesso ao banco: {e}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro ao testar banco: {e}")
        return False

def create_teams_table():
    """Cria a tabela de teams se n√£o existir."""
    print("\nüèóÔ∏è  Criando tabela de teams...")
    
    try:
        from supabase import create_client
        
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        
        supabase = create_client(supabase_url, supabase_anon_key)
        
        # SQL para criar tabela de teams
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS teams (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            description TEXT,
            workflow_type VARCHAR(20) NOT NULL DEFAULT 'sequential',
            user_id UUID NOT NULL,
            agents JSONB DEFAULT '[]'::jsonb,
            status VARCHAR(20) DEFAULT 'active',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- RLS (Row Level Security)
        ALTER TABLE teams ENABLE ROW LEVEL SECURITY;
        
        -- Policy para usu√°rios s√≥ verem suas pr√≥prias teams
        CREATE POLICY IF NOT EXISTS "Users can view own teams" ON teams
            FOR SELECT USING (auth.uid() = user_id);
            
        CREATE POLICY IF NOT EXISTS "Users can insert own teams" ON teams
            FOR INSERT WITH CHECK (auth.uid() = user_id);
            
        CREATE POLICY IF NOT EXISTS "Users can update own teams" ON teams
            FOR UPDATE USING (auth.uid() = user_id);
            
        CREATE POLICY IF NOT EXISTS "Users can delete own teams" ON teams
            FOR DELETE USING (auth.uid() = user_id);
        """
        
        # Executa o SQL
        response = supabase.rpc('exec_sql', {'sql': create_table_sql}).execute()
        print("‚úÖ Tabela teams criada/verificada com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar tabela teams: {e}")
        # Isso pode falhar se n√£o tivermos permiss√µes de admin
        print("‚ÑπÔ∏è  Isso √© normal se n√£o tivermos permiss√µes de admin no Supabase")
        return False

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Diagn√≥stico de Conex√£o Supabase")
    print("=" * 50)
    
    success = True
    
    # Teste 1: Conex√£o b√°sica
    success &= test_supabase_connection()
    
    # Teste 2: Acesso ao banco
    success &= test_database_access()
    
    # Teste 3: Criar tabela (opcional)
    create_teams_table()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCESSO! Supabase est√° funcionando corretamente.")
        print("\nüìã Pr√≥ximos passos:")
        print("   1. A autentica√ß√£o est√° funcionando")
        print("   2. Voc√™ pode iniciar o servidor da API")
        print("   3. Os endpoints /login e /signup devem funcionar")
    else:
        print("‚ùå PROBLEMAS encontrados na conex√£o com Supabase.")
        print("\nüîß Poss√≠veis solu√ß√µes:")
        print("   1. Verifique as credenciais no arquivo .env")
        print("   2. Confirme que o projeto Supabase est√° ativo")
        print("   3. Verifique as configura√ß√µes de RLS no Supabase")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())